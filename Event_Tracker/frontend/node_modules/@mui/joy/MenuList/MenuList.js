import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
const _excluded = ["actions", "id", "children", "size"];
import * as React from 'react';
import PropTypes from 'prop-types';
import composeClasses from '@mui/base/composeClasses';
import { useSlotProps } from '@mui/base/utils';
import { useMenu, MenuUnstyledContext } from '@mui/base/MenuUnstyled';
import { styled, useThemeProps } from '../styles';
import List from '../List';
import { getMenuListUtilityClass } from './menuListClasses';
import { jsx as _jsx } from "react/jsx-runtime";

const useUtilityClasses = () => {
  const slots = {
    root: ['root']
  };
  return composeClasses(slots, getMenuListUtilityClass, {});
};

const MenuListRoot = styled(List, {
  name: 'MuiMenuList',
  slot: 'Root',
  overridesResolver: (props, styles) => styles.root
})({});
const MenuList = /*#__PURE__*/React.forwardRef(function MenuList(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: 'MuiMenuList'
  });

  const {
    actions,
    id: idProp,
    children,
    size = 'md'
  } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded);

  const {
    registerItem,
    unregisterItem,
    getListboxProps,
    getItemProps,
    getItemState,
    highlightFirstItem,
    highlightLastItem
  } = useMenu({
    listboxRef: ref,
    listboxId: idProp
  });
  React.useImperativeHandle(actions, () => ({
    highlightFirstItem,
    highlightLastItem
  }), [highlightFirstItem, highlightLastItem]);
  const classes = useUtilityClasses();

  const ownerState = _extends({}, props, {
    size
  });

  const listboxProps = useSlotProps({
    elementType: MenuListRoot,
    getSlotProps: getListboxProps,
    externalSlotProps: {},
    externalForwardedProps: other,
    additionalProps: {
      size
    },
    ownerState,
    className: classes.root
  });
  const contextValue = {
    registerItem,
    unregisterItem,
    getItemState,
    getItemProps,
    getListboxProps,
    open: true
  };
  return /*#__PURE__*/_jsx(MenuListRoot, _extends({}, listboxProps, {
    children: /*#__PURE__*/_jsx(MenuUnstyledContext.Provider, {
      value: contextValue,
      children: children
    })
  }));
});
process.env.NODE_ENV !== "production" ? MenuList.propTypes
/* remove-proptypes */
= {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------

  /**
   * A ref with imperative actions.
   * It allows to select the first or last menu item.
   */
  actions: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({
    current: PropTypes.shape({
      highlightFirstItem: PropTypes.func.isRequired,
      highlightLastItem: PropTypes.func.isRequired
    })
  })]),

  /**
   * The content of the component.
   */
  children: PropTypes.node,

  /**
   * @ignore
   */
  id: PropTypes.string,

  /**
   * The size of the component (affect other nested list* components).
   * @default 'md'
   */
  size: PropTypes
  /* @typescript-to-proptypes-ignore */
  .oneOfType([PropTypes.oneOf(['sm', 'md', 'lg']), PropTypes.string])
} : void 0;
export default MenuList;